@page "/edit-games-collection"
@page "/edit-games-collection/{id:int}"

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

@rendermode InteractiveServer

<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if(genres is null || gameDetails is null)
{
    <p><em>Loading...</em></p>
}

else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm
                Model="@gameDetails"
                FormName="EditGame"
                OnValidSubmit="HandleSubmitAsync"
                Enhance>
                <DataAnnotationsValidator/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="gameDetails.Name" class="form-control" />
                    <ValidationMessage For="() => gameDetails.Name"/>
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="gameDetails.GenreID" class="form-select">
                        <option value="">--- Select a Genre ---</option>
                        @foreach(var genre in genres)
                        {
                            <option value="@genre.ID">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => gameDetails.GenreID"/>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="gameDetails.Price" class="form-control" />
                    <ValidationMessage For="() => gameDetails.Price"/>
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date:</label>
                    <InputDate id="releaseDate" @bind-Value="gameDetails.ReleaseDate" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {

    [Parameter]
    public int? ID {get; set;}

    [SupplyParameterFromForm]
    private GameDetails? gameDetails {get; set;}
    
    private Genres[]? genres;

    private string title = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if(gameDetails is not null)
        {
            return;
        }

        if(ID is not null)
        {
            gameDetails = await GamesClient.GetGameAsync(ID.Value);
            title = $"Edit {gameDetails.Name}";
        }

        else
        {
            gameDetails = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };

            title = "New Game";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        genres = await GenresClient.GetGenresAsync();
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(gameDetails);

        if(ID is null)
        {
            await GamesClient.AddGameAsync(gameDetails);
        }

        else
        {
            gameDetails.ID = ID.Value;
            await GamesClient.UpdateGameAsync(gameDetails);
        }

        NavigationManager.NavigateTo("/");
    }
}
